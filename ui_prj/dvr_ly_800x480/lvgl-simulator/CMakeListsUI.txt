cmake_minimum_required(VERSION 3.10)
project(lvgl)
set(CMAKE_C_STANDARD 11)#C11
set(CMAKE_CXX_STANDARD 17)#C17
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_COMPILER_FORCED, ON)
set(CMAKE_C_COMPILER_FORCED, ON)
set(CMAKE_BUILD_TYPE, "Debug")
set(CMAKE_MAKE_PROGRAM, "mingw32-make.exe")
set(CMAKE_C_COMPILER, "gcc.exe")
set(CMAKE_CXX_COMPILER, "g++.exe")
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
set(CMAKE_CXX_FLAGS "-O3 -g")

add_definitions(-DLV_USE_GUIBUILDER_SIMULATOR)

include_directories(${PROJECT_SOURCE_DIR}/../lvgl)
include_directories(${PROJECT_SOURCE_DIR}/../lvgl/src)
include_directories(${PROJECT_SOURCE_DIR}/../custom)
file(GLOB_RECURSE CUSTOM_SUBDIRS LIST_DIRECTORIES true "${PROJECT_SOURCE_DIR}/../custom/*")
foreach(DIR ${CUSTOM_SUBDIRS})
    if(IS_DIRECTORY ${DIR})
        include_directories(${DIR})
    endif()
endforeach()
file(GLOB_RECURSE GENERATED_SUBDIRS LIST_DIRECTORIES true "${PROJECT_SOURCE_DIR}/../generated/*")
include_directories(${PROJECT_SOURCE_DIR}/../generated)
foreach(DIR ${GENERATED_SUBDIRS})
    if(IS_DIRECTORY ${DIR})
        include_directories(${DIR})
    endif()
endforeach()
include_directories(${PROJECT_SOURCE_DIR})

if(EXISTS "${PROJECT_SOURCE_DIR}/../generated/debugger")
    file(GLOB_RECURSE DEBUGGER_SUBDIRS LIST_DIRECTORIES true "${PROJECT_SOURCE_DIR}/../generated/debugger/*")
    foreach(DIR ${DEBUGGER_SUBDIRS})
        if(IS_DIRECTORY ${DIR})
            include_directories(${DIR})
        endif()
    endforeach()
endif()

# INCLUDES
file(GLOB_RECURSE CUSTOM_HEADERS "${PROJECT_SOURCE_DIR}/../custom/*.h")
file(GLOB_RECURSE GENERATED_HEADERS "${PROJECT_SOURCE_DIR}/../generated/*.h")
file(GLOB_RECURSE CURRENT_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/*.h")
set(INCLUDES ${CUSTOM_HEADERS} ${GENERATED_HEADERS} ${CURRENT_HEADERS})
# SOURCES
file(GLOB_RECURSE CUSTOM_SOURCES "${PROJECT_SOURCE_DIR}/../custom/*.c")
file(GLOB_RECURSE GENERATED_SOURCES "${PROJECT_SOURCE_DIR}/../generated/*.c")
set(SOURCES ${CUSTOM_SOURCES} ${GENERATED_SOURCES} ${CURRENT_SOURCES})


# find_package(SDL2 REQUIRED SDL2)
SET(SDL2 ${PROJECT_SOURCE_DIR}/SDL2)
include_directories(${SDL2_INCLUDE_DIRS})

include_directories(${PROJECT_SOURCE_DIR}/libuv)
include_directories(${PROJECT_SOURCE_DIR}/cjson)
include_directories(${PROJECT_SOURCE_DIR}/mqtt)

link_directories(${PROJECT_SOURCE_DIR}/bin)
add_executable(main main.c mouse_cursor_icon.c ${SOURCES} ${INCLUDES})
add_compile_definitions(LV_CONF_INCLUDE_SIMPLE)

# target_link_libraries(main drv lvgl SDL2 Freetype rlottie avformat avcodec avutil swscale uv cjson gui_mqtt paho-mqtt3a)
target_link_libraries(main drv -Wl,--start-group lvgl lvgl.extra -Wl,--end-group SDL2 Freetype rlottie avformat avcodec avutil swscale uv cjson gui_mqtt paho-mqtt3a)

target_compile_options(main PRIVATE -Wno-attributes)

add_custom_target (run COMMAND ${EXECUTABLE_OUTPUT_PATH}/main)

